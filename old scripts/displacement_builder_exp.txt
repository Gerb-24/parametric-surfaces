This file is an explanation of what displacement builder is capable of at the moment

So first we of we need to know what a displacement is made out of:
    1) a displacement has a starting point
    2) a side gets cut up into a 9x9 grid of vertices
    3) for every vertex there is a normal and a distance (so basically a vector pointing towards where the new point is)
    4) convexity doesnt matter when applying these vectors to the vertices

Now we will look at what some of the scripts do:

disp_z_axis_builder
    this script has a function as input and maps the displacement, which starts of as a flat plane under the function,
    into the graph.
    This method already works fairly well: a lot of cool things can be made with it.

    However when a map gets too steep, using the projection is not the best idea,
    because you can see that it is not smooth.
    Note that this method will work well for creating nice walldesigns

trim_builder_x and y
    this script basically works the same as disp_z_axis_builder,
    but it is extended to do the same projection on side displacements

    another thing that is added is that it takes in intervals along the x and y axis respectively.
    it is used to make small displacements that look like curved trims along a ceiling (made with disp_z_axis_builder)
    see (trims1.vmf)

cilinder_builder
    this script works very different from the previous two.
    the idea is that we create a point, and then we create a vector between that point and a displacement vertex
    then we normalize the vector and take that as our unit vector,
    and we take the distance as the distance of our original vector - our chosen radius

    at the moment it can only make a quarter of a cilinder this way
    it should also be doable to make a sphere with this method

    this script got extended to modulate the radius along the x axis (see sinestube.vmf)

    other ideas for extension:
        make it be able to twist along x axis

        if we have a sphere, and calculate the angle a point has,
        then we can make a polar parametrization (so more difference in tubes)

        make a torus with it

So what is next?
    something cool to try would be to make an real displacement maker
    so how will this work:
        1   first a set of turning points will be given, which someone has to decide after the map is plotted
            then the code will choose an axis for all intervals
            the line connecting the starting point and endpoint will have the its points along the same perpendicular line
            to the



